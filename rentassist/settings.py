"""
Django settings for rentassist project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
import sys
import django_heroku
from decouple import config
from firebase_admin import credentials, initialize_app

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(str(BASE_DIR), 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-+!^!28=^tmijtwus**pmtt$3c(0dmmtkt$3$@m($zr5b6xn=_="

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    'rent-assist-2021.herokuapp.com',
    '*',
]

AUTH_USER_MODEL = 'users.CustomUser'

# Application definition

PRELOADED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #'django.contrib.sites',
]
THIRD_PARTY_APPS = [
    'phonenumber_field',
    'django_celery_beat',
    'corsheaders',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'allauth',
    'allauth.socialaccount',
    'allauth.account',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'django_celery_results',
    'fcm_django'
]
LOCAL_APPS = [
    'users.apps.UsersConfig',
    'rentapp.apps.RentappConfig',
    'ocr.apps.OcrConfig',
    'payment.apps.PaymentConfig',
    'chat.apps.ChatConfig',
    'documents.apps.DocumentsConfig',
    'notification.apps.NotificationConfig'
    
]
LAST_LOADED_APPS = ['baton.autodiscover']

INSTALLED_APPS = ['baton'] + PRELOADED_APPS + THIRD_PARTY_APPS + LOCAL_APPS + LAST_LOADED_APPS

CRON_CLASSES = [
    "rentapp.cron.MyCronJob",
    # ...
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'rentassist.middleware.DisableCSRFMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'corsheaders.middleware.CorsMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = 'rentassist.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
REST_FRAMEWORK ={
    'DEFAULT_PERMISSION_CLASSES': [
        #should change later
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES' : [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ]
}

WSGI_APPLICATION = 'rentassist.wsgi.application'
ASGI_APPLICATION = 'rentassist.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'github.com',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
BATON = {
    'SITE_HEADER': 'Baton',
    'SITE_TITLE': 'Baton',
    'INDEX_TITLE': 'Site administration',
    'SUPPORT_HREF': 'https://github.com/otto-torino/django-baton/issues',
    'COPYRIGHT': 'copyright Â© 2020 <a href="https://www.otto.to.it">Otto srl</a>', # noqa
    'POWERED_BY': '<a href="https://www.otto.to.it">Otto srl</a>',
    'CONFIRM_UNSAVED_CHANGES': True,
    'SHOW_MULTIPART_UPLOADING': True,
    'ENABLE_IMAGES_PREVIEW': True,
    'CHANGELIST_FILTERS_IN_MODAL': True,
    'CHANGELIST_FILTERS_ALWAYS_OPEN': False,
    'CHANGELIST_FILTERS_FORM': True,
    'MENU_ALWAYS_COLLAPSED': False,
    'MENU_TITLE': 'Menu',
    'MESSAGES_TOASTS': False,
    'GRAVATAR_DEFAULT_IMG': 'retro',
    'LOGIN_SPLASH': '/static/core/img/login-splash.png',
    'SEARCH_FIELD': {
        'label': 'Search contents...',
        'url': '/search/',
    },
    'MENU': (
        { 'type': 'title', 'label': 'main', 'apps': ('auth', ) },
        {
            'type': 'app',
            'name': 'auth',
            'label': 'Authentication',
            'icon': 'fa fa-lock',
            'models': (
                {
                    'name': 'user',
                    'label': 'Users'
                },
                {
                    'name': 'group',
                    'label': 'Groups'
                },
            )
        },
        { 'type': 'title', 'label': 'Contents', 'apps': ('flatpages', ) },
        { 'type': 'model', 'label': 'Pages', 'name': 'flatpage', 'app': 'flatpages' },
        { 'type': 'free', 'label': 'Custom Link', 'url': 'http://www.google.it', 'perms': ('flatpages.add_flatpage', 'auth.change_user') },
        { 'type': 'free', 'label': 'My parent voice', 'default_open': True, 'children': [
            { 'type': 'model', 'label': 'A Model', 'name': 'mymodelname', 'app': 'myapp' },
            { 'type': 'free', 'label': 'Another custom link', 'url': 'http://www.google.it' },
        ] },
    ),
    
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'users.serializers.CustomRegisterSerializer',
    'USER_DETAILS_SERIALIZER': 'users.serializers.CustomUserDetailsSerializer',
}


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATICFILES_DIRS =  [
    BASE_DIR / "static",
    ]
STATIC_ROOT =  BASE_DIR / 'staticfiles'
STATIC_URL = 'static/'
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


SITE_ID = 1

AUTHENTICATION_BACKENDS = [
  
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',

]

CORS_ALLOWED_WHITELIST = [
    "https://rent-assist-2021.herokuapp.com",
    "http://127.0.0.1:8000",
 
]
CSRF_TRUSTED_ORIGINS = ['https://rent-assist-2021.herokuapp.com']
BATON = {
    'MENU_ALWAYS_COLLAPSED':
        False,
    'COLLAPSABLE_USER_AREA':
        True,
    'CHANGELIST_FILTERS_FORM':
        True,
    'MESSAGES_TOASTS':
        True,
    'SITE_HEADER':
        'Rent Assist',
    'SITE_TITLE':
        'Rent Assist',
    'COPYRIGHT':
        'Rent Assist @2022',
    'POWERED_BY':
        'The3Devs',
    'SUPPORT_HREF':
        'support@rentassist.com.np',
    'CONFIRM_UNSAVED_CHANGES':
        True,
    'SHOW_MULTIPART_UPLOADING':
        True,
    'ENABLE_IMAGES_PREVIEW':
        True,
    'CHANGELIST_FILTERS_IN_MODAL':
        True,
    'GRAVATAR_DEFAULT_IMG':
        'mp',
    'LOGIN_SPLASH':
        None,
}


#backup redis in case of expiry
REDIS_BACKUP_URI = 'redis://:JNGI3rzll7imo8vcbDLFk7bYe8qkE4mI@redis-11450.c264.ap-south-1-1.ec2.cloud.redislabs.com:11450'

# REDIS CONFIGS
DATABASE_NUMBER = 11224858
REDIS_PORT = 18752
REDIS_KEY = 'BVcojnfKFHsr6N0zOK9keokfoxE0H6jt'
REDIS_HOSTNAME = 'redis://:' +  REDIS_KEY + '@redis-18752.c81.us-east-1-2.ec2.cloud.redislabs.com:18752'

# Celery Configuration Options
CELERY_TIMEZONE = "UTC"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

EMAIL_HOST_USER = 'rentasisst@gmail.com'
EMAIL_HOST_PASSWORD = 'eneaxxzuohalrlqo'


CELERY_BROKER_URL = REDIS_HOSTNAME
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'



#  Firebase setup
FIREBASE_CREDENTIALS_FILE = 'rent-assist-ce78b-firebase-adminsdk-pgodm-04a9fadbc0.json'
FIREBASE_CRENDETIALS_PATH = os.path.join(
    BASE_DIR,
    'rentassist/credentials/rent-assist-ce78b-firebase-adminsdk-pgodm-04a9fadbc0.json',) #for firebase
    # 'rentassist\\credentials\\rent-assist-ce78b-firebase-adminsdk-pgodm-04a9fadbc0.json',) # for local
    # config('FIREBASE_CRENDETIALS_PATH', cast=str),

FIREBASE_CERTIFICATE = credentials.Certificate(FIREBASE_CRENDETIALS_PATH)
FIREBASE_APP = initialize_app(FIREBASE_CERTIFICATE)

FCM_DJANGO_SETTINGS = {
     # default: _('FCM Django')
    "APP_VERBOSE_NAME": "RentAssist",
     # true if you want to have only one active device per registered user at a time
     # default: False
    "ONE_DEVICE_PER_USER": True,
     # devices to which notifications cannot be sent,
     # are deleted upon receiving error response from FCM
     # default: False
    "DELETE_INACTIVE_DEVICES": True,
    # Transform create of an existing Device (based on registration id) into
                # an update. See the section
    # "Update of device with duplicate registration ID" for more details.
    "UPDATE_ON_DUPLICATE_REG_ID": True,
}



import dj_database_url
db_from_env = dj_database_url.config()
DATABASES['default'].update(db_from_env)
DATABASES['default']['CONN_MAX_AGE'] = 500

django_heroku.settings(locals())